" Colorsheme
syntax on
set background=dark
set t_Co=256
colorscheme gruvbox

" GraphQL
" neovim を 0.10.0 以上にあげたらいらなくなる記述
let g:denops_disable_version_check = 1

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#close_symbol = '×'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#virtualenv#enabled = 1
let g:airline_theme = 'base16_gruvbox_dark_hard'
let g:airline#extensions#default#layout = [
    \ [ 'z', 'y', 'x' ],
    \ [ 'c', 'b', 'a', 'error', 'warning']
    \ ]
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
nmap <Tab> <Plug>AirlineSelectPrevTab
nmap <S-Tab> <Plug>AirlineSelectNextTab
nmap <C-c> :tablast <bar> tabnew<CR>

" eslint
autocmd BufWritePre *.tsx,*.ts,*.jsx,*.js EslintFixAll

" vim-gitgutter
set  signcolumn=yes

" fugitive.vim
nnoremap <silent> gb  :<C-u>Git blame<CR>

" terminal
tnoremap <Esc> <C-\><C-n>
command! -nargs=* T split | wincmd j | resize 20 | terminal <args>
autocmd TermOpen * startinsert

" fzf-preview.vim
nnoremap <silent> <C-p>  :<C-u>FzfPreviewProjectFilesRpc<CR>
nnoremap <silent> gs  :<C-u>FzfPreviewGitStatusRpc<CR>
nnoremap <silent> gl  :<C-u>FzfPreviewGitLogsRpc<CR>
nnoremap <silent> ga  :<C-u>FzfPreviewGitActionsRpc<CR>
nnoremap <silent> gr  :<C-u>FzfPreviewProjectGrepRpc --add-fzf-arg=--exact --add-fzf-arg=--no-sort<Space>
xnoremap gr  "sy:FzfPreviewProjectGrepRpc --add-fzf-arg=--exact --add-fzf-arg=--no-sort<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
let g:fzf_preview_custom_processes = {
            \ 'open-file': {
            \     'ctrl-o': 'FzfPreviewOpenFileCtrlO',
            \     'ctrl-f': 'FzfPreviewOpenFileCtrlQ',
            \     'ctrl-t': 'FzfPreviewOpenFileCtrlT',
            \     'ctrl-v': 'FzfPreviewOpenFileCtrlV',
            \     'ctrl-x': 'FzfPreviewOpenFileCtrlX',
            \     'enter': 'FzfPreviewOpenFileEnter'
            \ },
            \ 'register': {
            \     'enter': 'FzfPreviewRegisterEnter'
            \ }
\ }
let $FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS . ' --bind "ctrl-a:toggle-all"'

" 折り畳みを無効にする
set nofoldenable

" vim-startify
let g:startify_change_to_dir = 0
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1
let g:startify_session_dir = '~/.nvim/session'
let g:startify_session_number = 5
let g:startify_custom_header = [
  \ '    ============================================',
  \ '     Neovim ( v{{ neovim_version }} ) ',
  \ '    ============================================',
  \]
let g:startify_lists = [
          \ { 'type': 'sessions',  'header': ['    Sessions'] },
          \ { 'type': 'dir',       'header': ['    MRU '. getcwd()] },
          \ ]

" fern.vim
let g:fern#default_hidden=1
nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
let g:fern#renderer = 'nerdfont'

" nvim-cmp, nvim-lspconfig
let $PATH = $HOME . '/.rbenv/shims:' . $PATH
let $RBENV_VERSION = '{{ ruby_version }}'
let $BUNDLE_GEMFILE = $HOME . '/.rbenv/versions/{{ ruby_version }}/Gemfile'
let $NODENV_VERSION = '{{ node_version }}'
set completeopt=menu,menuone,noselect

lua <<EOF
  -- Global mappings.
  -- See `:help vim.diagnostic.*` for documentation on any of the below functions
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

  -- Use LspAttach autocommand to only map the following keys
  -- after the language server attaches to the current buffer
  vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
      -- Enable completion triggered by <c-x><c-o>
      vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

      -- Buffer local mappings.
      -- See `:help vim.lsp.*` for documentation on any of the below functions
      local opts = { buffer = ev.buf }
      vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
      vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
      vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
      vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
      vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
      vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
      vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
      vim.keymap.set('n', '<space>wl', function()
        print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
      end, opts)
      vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
      vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
      vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
      vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
      vim.keymap.set('n', '<space>f', function()
        vim.lsp.buf.format { async = true }
      end, opts)
    end,
  })

  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
      { name = 'path' },
    })
  })

  -- Set up LSP servers
  local nvim_lsp = require('lspconfig')
  local cmp_capabilities = require('cmp_nvim_lsp').default_capabilities()
  local servers = { 'bashls', 'eslint', 'gopls', 'pylsp', 'solargraph' }
  for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup {
      on_attach = function(client, bufnr)
        capabilities = cmp_capabilities
        on_attach = on_attach
        vim.cmd [[
          set updatetime=500
          highlight LspReferenceText  cterm=underline ctermfg=1 ctermbg=8 gui=underline guifg=#A00000 guibg=#104040
          highlight LspReferenceRead  cterm=underline ctermfg=1 ctermbg=8 gui=underline guifg=#A00000 guibg=#104040
          highlight LspReferenceWrite cterm=underline ctermfg=1 ctermbg=8 gui=underline guifg=#A00000 guibg=#104040
          augroup lsp_document_highlight
            autocmd!
            autocmd CursorHold,CursorHoldI * lua vim.lsp.buf.document_highlight()
            autocmd CursorMoved,CursorMovedI * lua vim.lsp.buf.clear_references()
          augroup END
        ]]
        -- gopls のみで、かつ documentFormattingProvider が有効な場合にフォーマット設定を行う
        if lsp == "gopls" and client.server_capabilities.documentFormattingProvider then
          vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>f', '<cmd>lua vim.lsp.buf.format()<CR>', { noremap = true, silent = true })
          vim.cmd([[
            augroup GoAutoFormat
              autocmd!
              autocmd BufWritePre *.go lua vim.lsp.buf.format({ async = false })
            augroup END
          ]])
        end
      end
    }
  end

  nvim_lsp.sqls.setup{
    on_attach = function(client, bufnr)
      capabilities = capabilities
      require('sqls').on_attach(client, bufnr)
    end
  }

  -- Set up gopls
  function goimports(timeout_ms)
    local context = { only = { "source.organizeImports" } }
    vim.validate { context = { context, "t", true } }

    local params = vim.lsp.util.make_range_params()
    params.context = context

    -- See the implementation of the textDocument/codeAction callback
    -- (lua/vim/lsp/handler.lua) for how to do this properly.
    local result = vim.lsp.buf_request_sync(0, "textDocument/codeAction", params, timeout_ms)
    if not result or next(result) == nil then return end
    local actions = result[1].result
    if not actions then return end
    local action = actions[1]

    -- textDocument/codeAction can return either Command[] or CodeAction[]. If it
    -- is a CodeAction, it can have either an edit, a command or both. Edits
    -- should be executed first.
    if action.edit or type(action.command) == "table" then
      if action.edit then
        vim.lsp.util.apply_workspace_edit(action.edit)
      end
      if type(action.command) == "table" then
        vim.lsp.buf.execute_command(action.command)
      end
    else
      vim.lsp.buf.execute_command(action)
    end
  end
EOF
nnoremap <C-o> :<C-u>lua vim.lsp.buf.definition()<CR>
autocmd BufWritePre *.go call execute('lua vim.lsp.buf.formatting_sync()')
autocmd BufWritePre *.go lua goimports(1000)

" キーバインド変更
nnoremap j gj
nnoremap k gk
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" インデント関連の設定
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set backspace=indent,eol,start

" その他
set number
set splitright
set hls
set whichwrap=b,s,h,l,<,>,[,]
set cursorline
set cursorcolumn
set clipboard+=unnamedplus
set clipboard+=unnamed
set switchbuf+=usetab,newtab
set wildignore=assets
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

" 前回開いた行数から再開する
augroup vimrcEx
  au BufRead * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe "normal g`\"" | endif
augroup END

" wsl用設定
if system('uname -a | grep microsoft') != ''
  augroup Yank
    au!
    autocmd TextYankPost * :call system('win32yank.exe -i', @")
  augroup END
  noremap <silent> p :call setreg('"',system('win32yank.exe -o'))<CR>""p
endif
